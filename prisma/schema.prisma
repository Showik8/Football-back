// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}
enum Position {
  GOALKEEPER
  DEFENDER
  MIDFIELDER
  FORWARD
}

enum MatchResult {
  TEAM1_WIN
  TEAM2_WIN
  DRAW
  PENDING
}

model Player {
  id            Int     @id @default(autoincrement())
  name          String
  jersey        Int
  position      Position
  date_of_birth String   @map("date_of_birth")
  nationality   String
  height        Int?                
  weight        Int?                
  is_active     Boolean   @default(true) @map("is_active")
  created_at    DateTime  @default(now()) @map("created_at")
  updated_at    DateTime  @updatedAt @map("updated_at")
  
  statistics    PlayerStatistic[]
  team_players  TeamPlayer[]       

  @@map("players")
}

model Club {
  id                Int      @id @default(autoincrement())
  name              String   @unique
  city              String
  founded_year      Int?     @map("founded_year")
  short_description String   @map("short_description")
  logo_url          String?  @map("logo_url") 
  created_at        DateTime @default(now()) @map("created_at")
  updated_at        DateTime @updatedAt @map("updated_at")
  
  teams             Team[]

  @@map("clubs")
}


model Team {
  id             Int      @id @default(autoincrement())
  name           String   @unique
  parent_club_id Int      @map("parent_club_id")
  age_category   String   @map("age_category") 
  is_active      Boolean  @default(true) @map("is_active")
  created_at     DateTime @default(now()) @map("created_at")
  updated_at     DateTime @updatedAt @map("updated_at")

  parent_club      Club              @relation(fields: [parent_club_id], references: [id], onDelete: Cascade)
  home_matches     Match[]           @relation("Team1Matches") 
  away_matches     Match[]           @relation("Team2Matches")
  team_tournaments TeamTournament[]
  team_players     TeamPlayer[]     

  @@unique([name, parent_club_id, age_category]) 
  @@map("teams")
}


model TeamPlayer {
  id         Int      @id @default(autoincrement())
  team_id    Int      @map("team_id")
  player_id  Int      @map("player_id")
  joined_at  DateTime @default(now()) @map("joined_at")
  left_at    DateTime? @map("left_at")
  is_active  Boolean  @default(true) @map("is_active")

  team       Team     @relation(fields: [team_id], references: [id], onDelete: Cascade)
  player     Player   @relation(fields: [player_id], references: [id], onDelete: Cascade)

  @@unique([team_id, player_id, joined_at])
  @@map("team_players")
}


model Tournament {
  id            Int       @id @default(autoincrement())
  name          String    @unique
  age_category  String    @map("age_category")
  location      String
  description   String?
  start_date    DateTime  @map("start_date")
  end_date      DateTime? @map("end_date") 
  logo_url      String?   @map("logo_url")
  is_active     Boolean   @default(true) @map("is_active")
  created_at    DateTime  @default(now()) @map("created_at")
  updated_at    DateTime  @updatedAt @map("updated_at")
  
  matches         Match[]
  team_tournaments TeamTournament[]

  @@map("tournaments")
}

model Match {
  id             Int         @id @default(autoincrement())
  tournament_id  Int         @map("tournament_id")
  team1_id       Int         @map("team1_id")
  team2_id       Int         @map("team2_id")
  round_number   Int         @map("round_number")
  match_date     DateTime?   @map("match_date")
  result         MatchResult @default(PENDING)
  score_team1    Int         @default(0) @map("score_team1")
  score_team2    Int         @default(0) @map("score_team2")
  notes          String?
  is_played      Boolean     @default(false) @map("is_played")
  created_at     DateTime    @default(now()) @map("created_at")
  updated_at     DateTime    @updatedAt @map("updated_at")

  tournament     Tournament  @relation(fields: [tournament_id], references: [id], onDelete: Cascade)
  team1          Team        @relation("Team1Matches", fields: [team1_id], references: [id])
  team2          Team        @relation("Team2Matches", fields: [team2_id], references: [id])

  @@unique([tournament_id, team1_id, team2_id, round_number])
  @@map("matches")
}


model PlayerStatistic {
  id             Int      @id @default(autoincrement())
  season         String   
  competition    String
  goals          Int      @default(0)
  assists        Int      @default(0) 
  matches_played Int      @default(0) @map("matches_played")
  views          Int      @default(0) @map("views")
  yellow_cards   Int      @default(0) @map("yellow_cards")
  red_cards      Int      @default(0) @map("red_cards")
  created_at     DateTime @default(now()) @map("created_at")
  updated_at     DateTime @updatedAt @map("updated_at")

  // Relations
  player_id      Int     @map("player_id")
  player         Player  @relation(fields: [player_id], references: [id], onDelete: Cascade)

  @@unique([player_id, season, competition]) 
  @@map("player_statistics")
}

model TeamTournament {
  id                Int        @id @default(autoincrement())
  team_id           Int        @map("team_id")
  tournament_id     Int        @map("tournament_id")
  completed_matches Int        @default(0) @map("completed_matches")
  won               Int        @default(0)
  drawn             Int        @default(0)
  lost              Int        @default(0)
  goals_for         Int        @default(0) @map("goals_for")
  goals_against     Int        @default(0) @map("goals_against")
  goal_difference   Int        @default(0) @map("goal_difference")
  points            Int        @default(0)
  position          Int?     
  created_at        DateTime   @default(now()) @map("created_at")
  updated_at        DateTime   @updatedAt @map("updated_at")

  team              Team       @relation(fields: [team_id], references: [id], onDelete: Cascade)
  tournament        Tournament @relation(fields: [tournament_id], references: [id], onDelete: Cascade)

  @@unique([team_id, tournament_id])  
  @@map("team_tournaments")
}
